#include "HX711.h"

const int DOUT=A1;
const int CLK=A0;
bool k,l = false;
int n = 5;
int c = 0;
HX711 balanza;

void setup() {
  Serial.begin(9600);
  balanza.begin(DOUT, CLK);
  Serial.print("Lectura del valor del ADC:  ");
  Serial.println(balanza.read());
  Serial.println("No ponga ningun  objeto sobre la balanza");
  Serial.println("Destarando...");
  Serial.println("...");
  balanza.set_scale(414186.99); // Establecemos la escala
  balanza.tare(20);  //El peso actual es considerado Tara.
  pinMode(8,INPUT);
  pinMode(9,INPUT);// Interruptores
  Serial.println("Listo para pesar");  
}

void loop() {
  Serial.print("Peso: ");
  Serial.print(balanza.get_units(3),3);
  Serial.println("  kg");
  delay(500);
  if(digitalRead(8)==HIGH){//Tara
  balanza.tare(20);
  }else if(digitalRead(9==HIGH && k!=true)){//Minimos Cuadrados
  }
  k = true;
  l = true;
  float x[n],y[n];
  unsigned long tiempop = millis();
  unsigned long tiempoa = 0;
  }
  while(k==true && c<=n){
    tiempoa = millis() - tiempop;
    x[c] = balanza.get_units(3);
    y[c] = tiempoa;
    c++;
    }
  if(c>n && l == true){
    
    for(int i=0;i<N;i++)
  {
  suma_x += x[i];
  suma_y += y[i];
  suma_xy += x[i]*y[i];
  suma_x2 += x[i]*x[i];  
  suma_x3 += x[i]*x[i]*x[i];
  suma_x4 += x[i]*x[i]*x[i]*x[i]; 
  suma_x2y += x[i]*x[i]*y[i];
  }
  float matreg[3][3]={N,suma_x,suma_x2,suma_x,suma_x2,suma_x3,suma_x2,suma_x3,suma_x4};
  float I[3][3],pivote,aux;
  float Mult[1][3]={suma_y,suma_xy,suma_x2y};
  for(int j=0;j<3;j++)
  {for(int k=0;k<3;k++)
  {
    I[j][k]=0;
    if(j==k)
    {
    I[j][k]=1;
    }
    
  }
  }
  for(int i=0;i<3;i++)
  {pivote = matreg[i][i];
    for(int k=0;k<3;k++)
  {
    matreg[i][k] /= pivote;
    I[i][k] /= pivote;
  }
   for(int j=0;j<3;j++)
  {
    if(i!=j)
    {
    aux = matreg[j][i];
      for(int k=0;k<3;k++)
      {
       matreg[j][k] -= (aux*matreg[i][k]);
       I[j][k] -= (aux*I[i][k]);
      }
    }
  }
  }
  //Ahora la matriz identidad es la matriz inversa
  //Entonces hacemos la multiplicaciÃ³n matricial para hallar los coeficientes
  float coef[1][3];
  
  coef[0][0]= I[0][0]*Mult[0][0] + I[0][1]*Mult[0][1] + I[0][2]*Mult[0][2];
  coef[0][1]= I[1][0]*Mult[0][0] + I[1][1]*Mult[0][1] + I[1][2]*Mult[0][2];
  coef[0][2]= I[2][0]*Mult[0][0] + I[2][1]*Mult[0][1] + I[2][2]*Mult[0][2];
  
    
    
    }
}
